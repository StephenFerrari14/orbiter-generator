{"version":3,"sources":["components/OrbRing.js","helpers.js","components/GravityBounds.js","App.js","serviceWorker.js","index.js"],"names":["OrbRing","props","radius","stroke","normalizedRadius","circumference","Math","PI","this","progress","strokeDashoffset","height","width","style","invert","fill","strokeWidth","strokeDasharray","r","cx","cy","Component","getRandomInt","max","floor","random","GravityBounds","Array","rings","map","ring","index","top","left","spacing","marginTop","marginLeft","animationTiming","speedMax","key","animation","position","App","handleChange","event","target","value","type","checked","name","setState","state","document","body","boxSizing","marginRight","paddingLeft","paddingRight","maxWidth","onChange","Number","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58637a25.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass OrbRing extends Component {\n  constructor(props) {\n    super(props);\n\n    const { radius, stroke } = this.props;\n\n    this.normalizedRadius = radius - stroke * 2;\n    this.circumference = this.normalizedRadius * 2 * Math.PI;\n  }\n\n  render() {\n    const { radius, stroke, progress } = this.props;\n    const strokeDashoffset = this.circumference - progress / 100 * this.circumference;\n\n    return (\n      <svg\n        height={radius * 2}\n        width={radius * 2}\n        style={this.props.style}\n      >\n        <circle\n          stroke={this.props.invert ? \"white\" : \"black\"}\n          fill=\"transparent\"\n          strokeWidth={stroke}\n          strokeDasharray={this.circumference + ' ' + this.circumference}\n          style={{ strokeDashoffset }}\n          r={this.normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n      </svg>\n    );\n  }\n}\n\nexport default OrbRing","export const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max))\n","import React, { Component } from 'react'\nimport OrbRing from \"./OrbRing\";\nimport { getRandomInt } from \"../helpers\"\n\nexport default class GravityBounds extends Component {\n  render() {\n    return (\n      <div>\n        {Array(this.props.rings).fill(1).map((ring, index) => {\n          // Change to iterate from largest to smallest\n          let top = 0;\n          let left = 0;\n          let radius = 40 + (this.props.rings * 10) - (index * 10);\n          if (index !== 0) {\n            top = left = 10 + 10 * (index - 1);\n          }\n          const spacing = {\n            marginTop: `${top}px`,\n            marginLeft: `${left}px`\n          }\n          const progress = getRandomInt(360);\n          const animationTiming = getRandomInt(this.props.speedMax) / 10 + 2\n          return (\n            <OrbRing\n              key={`ring${index}`}\n              radius={radius}\n              stroke={10}\n              progress={progress}\n              style={{ animation: `spin ${animationTiming}s linear infinite`, position: 'absolute', ...spacing }}\n              invert={this.props.invert}\n            ></OrbRing>\n          )\n        })}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport GravityBounds from \"./components/GravityBounds\"\nimport { getRandomInt } from \"./helpers\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      rings: getRandomInt(4) + 1,\n      speedMax: 30,\n      stroke: 10,\n      invert: false\n    }\n  }\n\n  handleChange = (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n  render() {\n    if (this.state.invert) {\n      document.body.style = 'background: black';\n    } else {\n      document.body.style = 'background: white';\n    }\n    return (\n      <div style={{\n        width: '100%',\n        boxSizing: 'border-box',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n        maxWidth: '600px'\n      }}>\n        <form>\n          Rings: <input value={this.state.rings} onChange={this.handleChange} name=\"rings\"></input>\n          Stroke: <input value={this.state.stroke} onChange={this.handleChange} name=\"stroke\"></input>\n          Speed Max: <input value={this.state.speedMax} onChange={this.handleChange} name=\"speedMax\"></input>\n          Invert: <input type=\"checkbox\" value={this.state.invert} onChange={this.handleChange} name=\"invert\"></input>\n        </form>\n        <GravityBounds\n          rings={Number(this.state.rings)}\n          invert={!!this.state.invert}\n          speedMax={Number(this.state.speedMax)}\n        ></GravityBounds>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}